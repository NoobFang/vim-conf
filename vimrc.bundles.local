" 设置状态栏主题风格
let g:Powerline_colorscheme='solarized256'
" 设置状态栏文件名显示形似[filename,short,relative,full]
let g:Powerline_stl_path_style='short'


" 基于缩进或语法进行代码折叠
" set foldmethod=indent
" set foldmethod=syntax
" 启动 vim 时关闭折叠代码
" set nofoldenable


" 快捷键
map <SPACE> <Plug>(wildfire-fuel)
vmap <S-SPACE> <Plug>(wildfire-water)
" 适用于哪些结对符
let g:wildfire_objects = ["i'", 'i"', "i)", "i]", "i}", "i>", "ip"]


" 设置 tagbar 子窗口的位置出现在主编辑区的左边 
let tagbar_left=1 
" 设置显示／隐藏标签列表子窗口的快捷键。速记：tag list 
nnoremap <Leader>tl :TagbarToggle<CR> 
" 设置标签子窗口的宽度 
let tagbar_width=32 
" tagbar 子窗口中不显示冗余帮助信息 
let g:tagbar_compact=1
" 设置 ctags 对哪些代码元素生成标签
let g:tagbar_type_cpp = {
  \ 'kinds' : [
    \ 'd:macros:1',
    \ 'g:enums',
    \ 't:typedefs:0:0',
    \ 'e:enumerators:0:0',
    \ 'n:namespaces',
    \ 'c:classes',
    \ 's:structs',
    \ 'u:unions',
    \ 'f:functions',
    \ 'm:members:0:0',
    \ 'v:global:0:0',
    \ 'x:external:0:0',
    \ 'l:local:0:0'
   \ ],
   \ 'sro'		: '::',
   \ 'kind2scope' : {
     \ 'g' : 'enum',
     \ 'n' : 'namespace',
     \ 'c' : 'class',
     \ 's' : 'struct',
     \ 'u' : 'union'
   \ },
   \ 'scope2kind' : {
     \ 'enum'	  : 'g',
     \ 'namespace' : 'n',
     \ 'class'	 : 'c',
     \ 'struct'	: 's',
     \ 'union'	 : 'u'
   \ }
\ }



" 使用 NERDTree 插件查看工程文件。设置快捷键，速记：file list
nmap <Leader>fl :NERDTreeToggle<CR>
" 设置NERDTree子窗口宽度
let NERDTreeWinSize=32
" 设置NERDTree子窗口位置
let NERDTreeWinPos="right"
" 显示隐藏文件
let NERDTreeShowHidden=1
" NERDTree 子窗口中不显示冗余帮助信息
let NERDTreeMinimalUI=1
" 删除文件时自动删除文件对应 buffer
let NERDTreeAutoDeleteBuffer=1
" 忽略文件显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp']


let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'


" 调用 gundo 树
 nnoremap <Leader>ud :GundoToggle<CR>


" Startify 配置
" 自定义Header和Footer, 
 "function! s:filter_header(lines) abort
     "let longest_line   = max(map(copy(a:lines), 'len(v:val)'))
     "let centered_lines = map(copy(a:lines),
                 "\ 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
     "return centered_lines
 "endfunction
 "let g:startify_custom_header= s:filter_header([
             "\ '+------------------------------+',
             "\ '|  1.01 ^ 365 =  37.78         |',
             "\ '+----------------+-------------+',
             "\])


" ZoomWin
nnoremap <leader>zw :ZoomWin<CR>
set stl=Normal
fun! ZWStatline(state)
    if a:state
        set stl=ZoomWin
    else
        set stl=Normal
    endif
endfun
if !exists("g:ZoomWin_funcref")
    let g:ZoomWin_funcref= function("ZWStatline")
endif

